package pojo;/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-01-07T01:05:03.130-05:00
  3.6.0.8
  
  Standalone prediction code with sample test data for GLMModel named ProstateModel

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/ProstateModel > ProstateModel.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m ProstateModel.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="ProstateModel", algorithm="glm")
public class ProstateModel extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 4; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_ProstateModel.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* AGE */ null,
    /* RACE */ null,
    /* PSA */ null,
    /* GLEASON */ null,
    /* CAPSULE */ ProstateModel_ColInfo_4.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.587248322147651,0.412751677852349};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public ProstateModel() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(6533859734734762550L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    final double [] b = BETA.VALUES;
    double eta = 0.0;
    for(int i = 0; i < CATOFFS.length-1; ++i) {
      int ival = (int)data[i];
      if(ival != data[i]) throw new IllegalArgumentException("categorical value out of range");
      ival += CATOFFS[i];
      if(ival < CATOFFS[i + 1])
        eta += b[ival];
    }
    for(int i = 0; i < b.length-1-0; ++i)
      eta += b[0+i]*data[i];
    eta += b[b.length-1]; // reduce intercept
    double mu = hex.genmodel.GenModel.GLM_logitInv(eta);
    preds[0] = (mu > 0.4692371978544654) ? 1 : 0; // threshold given by ROC
    preds[1] = 1.0 - mu; // class 0
    preds[2] =       mu; // class 1
    return preds;
  }
    static class BETA implements java.io.Serializable {
      public static final double[] VALUES = new double[5];
      static {
        BETA_0.fill(VALUES);
      }
      static final class BETA_0 implements java.io.Serializable {
        static final void fill(double[] sa) {
          sa[0] = -0.021982784457469033;
          sa[1] = -0.29576986049969545;
          sa[2] = 0.0285505722967912;
          sa[3] = 1.1568076063561978;
          sa[4] = -6.4673929939879535;
        }
      }
}
    // Categorical Offsets
    public static final int[] CATOFFS = {0};
}
// The class representing training column names
class NamesHolder_ProstateModel implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    NamesHolder_ProstateModel_0.fill(VALUES);
  }
  static final class NamesHolder_ProstateModel_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "AGE";
      sa[1] = "RACE";
      sa[2] = "PSA";
      sa[3] = "GLEASON";
    }
  }
}
// The class representing column CAPSULE
class ProstateModel_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    ProstateModel_ColInfo_4_0.fill(VALUES);
  }
  static final class ProstateModel_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}


